import { useState, useContext } from 'react';
import Head from 'next/head';
import { ApolloProvider } from '@apollo/client';

import Header from '../components/layout/Header';
import Marquee from '../components/ui/Marquee';
import useAuth from './../hooks/auth-hook';
import AuthContext from './../context/auth-context';
import AppModal from '../components/ui/Modal';
import AuthForms from '../components/layout/AuthForms';
import LoadingSpinner from '../components/ui/LoadingSpinner';
import { SearchProvider } from '../context/SearchContext';
import { client } from '../apollo';
import './_app.css';

import { Container } from '@mui/material';
import Link from 'next/link';
import StarIcon from '@mui/icons-material/Star';
import ChangePasswordForm from '../components/ui/forms/ChangePasswordForm';
import { useHttpClient } from '../hooks/http-hook';

export default function App({ Component, pageProps }) {
  const { token, login, logout, userType } = useAuth();
  const [requestSuccessful, setRequestSuccessful] = useState(null);
  const authContext = useContext(AuthContext);
  const { isLoading, error, sendRequest, clearError } = useHttpClient();
  console.log('token', token);

  const [isLoginModalOpen, setIsLoginModalOpen] = useState(false);
  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);

  const toggleLoginModal = () => {
    setIsLoginModalOpen(!isLoginModalOpen);
  };

  const togglePasswordChangeModal = () => {
    setIsPasswordModalOpen(!isPasswordModalOpen);
  };

  const requestSuccessHandler = () => {
    setRequestSuccessful(true);

    setTimeout(() => {
      setRequestSuccessful(null);
      togglePasswordChangeModal();
    }, 1000);
  };

  const submitPasswordChange = async (data) => {
    console.log('data', data);
    try {
      const res = await sendRequest(
        'http://localhost:5000/change-password',
        'PUT',
        JSON.stringify(data),
        {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        }
      );

      console.log('res', res);
      requestSuccessHandler();
      // authContext.logout();
    } catch (err) {
      console.error('Error changing password:', err);
    }
  };

  return (
    <>
      <Head>
        <title>Got that ref?</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Marquee>
        YOU'VE SEEN A{' '}
        <em style={{ color: '#ff9799', fontStyle: 'normal' }}>
          VISUAL ARTS REFERENCE
        </em>{' '}
        IN A MOVIE OR SERIES?{' '}
        <Link
          style={{ color: '#fff', textDecoration: 'none' }}
          href="/send-a-reference"
        >
          <StarIcon sx={{ marginX: '5px' }} />
          SUBMIT A
          <em style={{ color: '#ff69de', fontStyle: 'normal' }}>
            &nbsp;NEW REFERENCE HERE
          </em>
          <StarIcon sx={{ marginX: '5px' }} />
        </Link>
      </Marquee>

      <AuthContext.Provider
        value={{
          isLoggedIn: !!token,
          token: token,
          userType: userType,
          login,
          logout,
        }}
      >
        <SearchProvider>
          <Header
            toggleLoginModal={toggleLoginModal}
            togglePasswordChangeModal={togglePasswordChangeModal}
          />

          <ApolloProvider client={client}>
            <AppModal open={isLoginModalOpen} handleClose={toggleLoginModal}>
              <AuthForms onSuccessfulSubmit={toggleLoginModal} />
            </AppModal>

            <AppModal
              open={isPasswordModalOpen}
              handleClose={togglePasswordChangeModal}
            >
              <ChangePasswordForm
                submitPasswordChange={(data) => submitPasswordChange(data)}
              />
              {isLoading && <LoadingSpinner />}

              {!isLoading && requestSuccessful && <LoadingSpinner />}
            </AppModal>

            <Container maxWidth="xlg" style={{ background: '#efeffd' }}>
              <main style={{ padding: '30px 0' }}>
                <Component {...pageProps} />
              </main>
            </Container>
          </ApolloProvider>
        </SearchProvider>
      </AuthContext.Provider>
    </>
  );
}
